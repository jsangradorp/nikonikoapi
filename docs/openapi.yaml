swagger: '2.0'
info:
  version: v1
  title: Nikoniko API
  description: ''
host: nikoniko.yokiyoki.com
schemes:
  - http
paths:
  '/reportedFeelings/boards/{boardId}/people/{personId}/dates/{date}':
    parameters:
      - name: boardId
        in: path
        required: true
        type: string
      - name: personId
        in: path
        required: true
        type: string
      - name: date
        in: path
        required: true
        type: string
    get:
      operationId: GET_reportedFeelings-boards-boardId-people-personId-dates-date
      description: |
        Get the reportedFeeling
        With boardId = boardId, personId = personId and date = date
      produces:
        - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
              personId: 1
              boardId: 1
              date: '2017-05-28'
              feeling: bad
        '404':
          description: ''
          examples:
            application/json:
              message: reportedFeeling not found
    post:
      operationId: POST_reportedFeelings-boards-boardId-people-personId-dates-date
      description: Insert or update a reportedFeeling
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            example:
              personId: 1
              boardId: 1
              date: '2017-05-28'
              feeling: bad
            $ref: '#/definitions/feeling'
      responses:
        default:
          description: ''
          schema: {}
  '/boards/{boardId}':
    parameters:
      - name: boardId
        in: path
        required: true
        type: string
    get:
      operationId: GET_boards-boardId
      parameters:
        - name: fromDate
          in: query
          required: true
          type: string
        - name: toDate
          in: query
          required: true
          type: string
      responses:
        default:
          description: ''
          schema: {}
  /people:
    get:
      operationId: GET_people
      parameters:
        - name: inBoard
          in: query
          required: false
          type: integer
      responses:
        default:
          description: ''
          schema: {}
  '/users/{userId}':
    parameters:
      - name: userId
        in: path
        required: true
        type: string
    get:
      operationId: GET_users-userId
      description: |
        Get the User
        With userId={userId}
      responses:
        default:
          description: ''
          schema: {}
  /login:
    post:
      operationId: POST_login
      description: Login endpoint
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            example:
              email: user@example.com
              password: whocares
            $ref: '#/definitions/credentials'
      responses:
        '200':
          description: ''
        '401':
          description: ''
definitions: {}
x-basePath: '/api/{version}'

