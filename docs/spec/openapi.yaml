openapi: '3.0.0'
info:
  title: Nikoniko boards API
  description: 'Manage Nikoniko boards and users'
  version: v3
servers:
- url: 'https://api.nikonikoboards.com'
  description: 'Main Nikoniko Boards API URL'
components:
  schemas:
    PersonType:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
    BoardType:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
    RetrievedUserType:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        person:
          $ref: '#/components/schemas/PersonType'
        boards:
          type: array
          items:
            $ref: '#/components/schemas/BoardType'
  examples:
    PersonExample:
      summary: 'Example person'
      value: |
        {
          id: 1
          label: "John Smith"
        }
    PeopleExample:
      summary: 'Example list of people'
      value: |
        [
          {
            id: 1,
            label: "Alice"
          },
          {
            id: 2,
            label: "Bob"
          }
        ]
    RetrievedUserExample:
      summary: 'Example of a users data'
      value: |
        {
          "person": {
            "id": 2,
            "label": "John"
          },
          "email": "john@example.com",
          "boards": [
            {
              "id": 1,
              "label": "Global board"
            },
            {
              "id": 2,
              "label": "The A Team"
            },
            {
              "id": 3,
              "label": "The Harlem Globetrotters"
            }
          ],
          "name": "John Smith",
          "user_id": 1
        }
paths:
  '/login':
    summary: 'Identify yourself to the API'
    post:
      summary: 'Identify yourself through user and password'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '400':
          description: 'Error: Bad request: missing parameter/s'
          content:
          application/json:
            schema:
              type: object
              properties:
                errors:
                  type: object
                  additionalProperties:
                    type: string
              example: |
                {
                  "errors": {
                    "password": "Required parameter 'password' not supplied"
                  }
                }
        '401':
          description: 'Error: Unauthorized: bad email/password combination'
          content:
          application/json:
            schema:
              type: string
              example: '"Invalid email and/or password for email: john@example.com"'
        '200':
          description: 'User has been identified correctly, this is the authentication token'
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: integer
                    description: 'Identifier of the identified user'
                  person:
                    type: integer
                    description: 'Identifier of the person associated with the user, if any'
                    required: false
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdGVkIjoiMjAxNy0wOC0xOVQxODozNjo1NC42NTcyMzciLCJ1c2VyIjoyLCJleHAiOjE1MDMyNDcwMTQuNjU3MjM3fQ.cIxYz0GrI-zn-Kx8XBT1TrbLaXgyNRd2gLMxLpqRYMo'
  '/users/{userId}':
    summary: 'Manage specific users of the API'
    get:
      summary: 'Retrieve a specific user'
      parameters:
      - name: userId
        description: 'identifier of the user we want to retrieve'
        in: path
        required: true
        schema:
          type: integer
      responses:
        '404':
          description: 'User not found'
        '200':
          description: 'User found, data in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievedUserType'
              examples:
              - $ref: '#/components/schemas/RetrievedUserExample'
  '/people':
    summary: 'Manage people involved in boards'
    get:
      summary: 'Retrieve people, optionally filtering by membership to a specific board'
      parameters:
      - name: inBoard
        description: 'board which retrieved people must be members of, otherwise retrieve all people registered in the system'
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: 'List of requested people to be returned (can be empty)'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonType'
              examples:
              - $ref: '#/components/examples/PeopleExample'

  '/reportedFeelings/boards/{boardId}/people/{personId}/dates/{date}':
    parameters:
      - name: boardId
        in: path
        required: true
        type: string
      - name: personId
        in: path
        required: true
        type: string
      - name: date
        in: path
        required: true
        type: string
    get:
      operationId: GET_reportedFeelings-boards-boardId-people-personId-dates-date
      description: |
        Get the reportedFeeling
        With boardId = boardId, personId = personId and date = date
      produces:
        - application/json
      responses:
        '200':
          description: ''
          examples:
            application/json:
              personId: 1
              boardId: 1
              date: '2017-05-28'
              feeling: bad
        '404':
          description: ''
          examples:
            application/json:
              message: reportedFeeling not found
    post:
      operationId: POST_reportedFeelings-boards-boardId-people-personId-dates-date
      description: Insert or update a reportedFeeling
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            example:
              personId: 1
              boardId: 1
              date: '2017-05-28'
              feeling: bad
            $ref: '#/definitions/feeling'
      responses:
        default:
          description: ''
          schema: {}
  '/boards/{boardId}':
    parameters:
      - name: boardId
        in: path
        required: true
        type: string
    get:
      operationId: GET_boards-boardId
      parameters:
        - name: fromDate
          in: query
          required: true
          type: string
        - name: toDate
          in: query
          required: true
          type: string
      responses:
        default:
          description: ''
          schema: {}
x-basePath: '/api/{version}'

