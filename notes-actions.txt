
Change email address. DON'T

- User logs in
- User goes to user profile
- User edits email address
- frontend sends password change to API (along with URL template or callback)
- API stores new email in DB, 'email-change-requests' table.
- API send email with link to verify change to new email. Code also in requests table, along with "old" token and expiry of the verification code.
- User receives email, follows the link. (/verify-email/XXXXXXXXXXXXXXX).
- API checks unexpired, does the update to the user profile, invalidates the token and deletes the request.
- Otherwise reports nonvalidity of the verification code. (non-authenticated page)

Send reset link.

Link to only reset the password or link that allows login (and then possibly change password)?

Reset password:

- Frontend invokes "/createresetpasswordcode", (parameter: URL template for
  callback)which sends email to user.
- API generates password reset code to use in /resetpassword endpoint, stores it in DB table with expiry and user. Directly sends email
- API sends it as a link (using URL template) to user. Linking to frontend/editpassword, with hidden field with the reset code in.
- Frontend editpassword page sends the new password and the code to API /resetpassword/<code,newpassword>json?formdata?
- API checks expiry, hashes the password and stores it in the users table corresponding to the code.
- Otherwise reports nonvalidity of the reset code.


OTP:

- API generates otp code to use in /login/<otp>, stores it in DB table with expiry and user. Returns it to frontend.
- Frontend sends it as link to user. Linking to frontend/login/otp.
- User follows link, goes to frontend login/otp page. This one forwards the code to th /login API.
- API checks expiry, and logs in.
- Otherwise reports nonvalidity of the login code.

